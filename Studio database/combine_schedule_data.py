#!/usr/bin/env python3

import json
import pandas as pd
import re
from datetime import datetime
from collections import defaultdict

def load_csv_data():
    """Load data from the CSV files generated by both analysis scripts"""
    
    # Load data from the 99-915 sheet analysis
    df_99_915 = pd.read_csv('Private_lesson_Calendar_tab2_99-915_AI_COMPLETE.csv')
    
    # Load data from the 69-615 sheet analysis  
    df_69_615_lessons = pd.read_csv('Private_lesson_Calendar_69-615_LESSONS_WITH_COLORS.csv')
    df_69_615_teachers = pd.read_csv('Private_lesson_Calendar_69-615_TEACHERS_BY_COLOR.csv')
    
    return df_99_915, df_69_615_lessons, df_69_615_teachers

def parse_teacher_colors():
    """Parse the teacher color mapping from the console output with actual teacher names"""
    
    # Based on the console output, create teacher color mapping with actual names
    teacher_colors = {
        'FFFFF2CC': 'MULTIPLE_TEACHERS_A',  # Reese, Larkin, Hazel, PAIGE, Vivi Fincher
        'FFA4C2F4': 'MULTIPLE_TEACHERS_B',  # Larkin, Remi, Mia W, Larkin/everly technique, Kinley - solo
        'FFFF00FF': 'REHEARSAL',  # Rehearsal
        'FFEAD1DC': 'MULTIPLE_TEACHERS_D',  # Larkin, Everly solo, Everly, MEGHAN, Mila & Reese duo
        'FF00FF00': 'GABI_M',  # Gabi M, Gabi M.
        'FFB4A7D6': 'KINLEY_HARLOW',  # Kinley, Harlow
        'FFFF9900': 'MULTIPLE_TEACHERS_G',  # Alia Pollema Solo, Ava Fransen, Kaylee Kaloustian
        'FFC9DAF8': 'RYANN',  # RYANN
        'FFD9EAD3': 'GRACIE',  # GRACIE
        'FFD9D2E9': 'CARALIN_BALLET_TEACHER',  # CARALIN ( BALLET TEACHER)
        'FFF6B26B': 'HUNTER',  # HUNTER
        'FFE06666': 'ARDEN',  # ARDEN
    }
    
    # Also create a detailed mapping for reference
    teacher_color_details = {
        'FFFFF2CC': ['Reese', 'Larkin', 'Hazel', 'PAIGE', 'Vivi Fincher'],
        'FFA4C2F4': ['Larkin', 'Remi', 'Mia W', 'Larkin/everly technique', 'Kinley - solo'],
        'FFFF00FF': ['Rehearsal'],
        'FFEAD1DC': ['Larkin', 'Everly solo', 'Everly', 'MEGHAN', 'Mila & Reese duo'],
        'FF00FF00': ['Gabi M', 'Gabi M.'],
        'FFB4A7D6': ['Kinley', 'Harlow'],
        'FFFF9900': ['Alia Pollema Solo', 'Ava Fransen', 'Kaylee Kaloustian'],
        'FFC9DAF8': ['RYANN'],
        'FFD9EAD3': ['GRACIE'],
        'FFD9D2E9': ['CARALIN ( BALLET TEACHER)'],
        'FFF6B26B': ['HUNTER'],
        'FFE06666': ['ARDEN'],
    }
    
    return teacher_colors, teacher_color_details

def process_99_915_data(df_99_915):
    """Process the 99-915 sheet data"""
    
    schedule_data = []
    
    for _, row in df_99_915.iterrows():
        time_slot = row['Time']
        
        # Skip header rows and empty time slots
        if time_slot == 'Time' or pd.isna(time_slot) or time_slot == '00:00:00':
            continue
            
        slot_data = {
            'time': time_slot,
            'sheet': '99-915',
            'week_starting': '2024-09-09',
            'lessons': []
        }
        
        # Process each day
        for col in df_99_915.columns[1:]:  # Skip 'Time' column
            if pd.notna(row[col]) and str(row[col]).strip():
                # Extract day and date from column name
                day_match = re.search(r'(\w+)\s+\(([^)]+)\)', col)
                if day_match:
                    day = day_match.group(1)
                    date = day_match.group(2)
                    
                    lesson_data = {
                        'day': day,
                        'date': date,
                        'lesson_details': str(row[col]).strip(),
                        'studio': 'Unknown',
                        'teacher_color': None,
                        'teacher_id': None
                    }
                    
                    slot_data['lessons'].append(lesson_data)
        
        if slot_data['lessons']:  # Only add if there are lessons
            schedule_data.append(slot_data)
    
    return schedule_data

def process_69_615_data(df_lessons, df_teachers):
    """Process the 69-615 sheet data with teacher color mapping"""
    
    teacher_colors, teacher_color_details = parse_teacher_colors()
    schedule_data = []
    
    for idx, (lesson_row, teacher_row) in enumerate(zip(df_lessons.iterrows(), df_teachers.iterrows())):
        _, lesson_data = lesson_row
        _, teacher_data = teacher_row
        
        time_slot = lesson_data['Time']
        
        # Skip header rows and empty time slots
        if time_slot == 'Time' or pd.isna(time_slot):
            continue
            
        slot_data = {
            'time': time_slot,
            'sheet': '69-615',
            'week_starting': '2025-06-09',  # Based on the dates in the data
            'lessons': []
        }
        
        # Process each day-studio combination
        for col in df_lessons.columns[1:]:  # Skip 'Time' column
            lesson_value = lesson_data[col]
            teacher_color = teacher_data[col] if col in teacher_data else None
            
            if pd.notna(lesson_value) and str(lesson_value).strip():
                # Extract day, studio, and date from column name
                col_match = re.search(r'(\w+)\s+(\w+\s+\d+)\s+\(([^)]+)\)', col)
                if col_match:
                    day = col_match.group(1)
                    studio = col_match.group(2)
                    date = col_match.group(3)
                    
                    teacher_id = teacher_colors.get(teacher_color, 'Unknown') if teacher_color and pd.notna(teacher_color) else None
                    
                    lesson_info = {
                        'day': day,
                        'date': date,
                        'studio': studio,
                        'lesson_details': str(lesson_value).strip(),
                        'teacher_color': teacher_color if pd.notna(teacher_color) else None,
                        'teacher_id': teacher_id
                    }
                    
                    slot_data['lessons'].append(lesson_info)
        
        if slot_data['lessons']:  # Only add if there are lessons
            schedule_data.append(slot_data)
    
    return schedule_data

def create_comprehensive_json():
    """Create a comprehensive JSON file combining all data"""
    
    print("Loading CSV data...")
    df_99_915, df_69_615_lessons, df_69_615_teachers = load_csv_data()
    
    print("Processing 99-915 data...")
    schedule_99_915 = process_99_915_data(df_99_915)
    
    print("Processing 69-615 data...")
    schedule_69_615 = process_69_615_data(df_69_615_lessons, df_69_615_teachers)
    
    # Get teacher color mapping
    teacher_colors, teacher_color_details = parse_teacher_colors()
    
    # Create comprehensive data structure
    comprehensive_data = {
        'metadata': {
            'generated_at': datetime.now().isoformat(),
            'source_file': 'Private lesson Calendar.xlsx',
            'analysis_tools': [
                'excel_ai_analyzer.py',
                'extract_teachers_by_color_fixed.py'
            ],
            'sheets_analyzed': ['99-915', '69-615']
        },
        'teacher_color_mapping': teacher_colors,
        'teacher_color_details': teacher_color_details,
        'schedules': {
            '99-915': {
                'description': 'Weekly schedule for 99-915 sheet',
                'week_starting': '2024-09-09',
                'time_slots': schedule_99_915
            },
            '69-615': {
                'description': 'Weekly schedule for 69-615 sheet with teacher color coding',
                'week_starting': '2025-06-09',
                'time_slots': schedule_69_615
            }
        },
        'statistics': {
            'total_time_slots': len(schedule_99_915) + len(schedule_69_615),
            'total_lessons_99_915': sum(len(slot['lessons']) for slot in schedule_99_915),
            'total_lessons_69_615': sum(len(slot['lessons']) for slot in schedule_69_615),
            'unique_teachers_identified': len(teacher_colors),
            'studios_used': list(set(
                lesson['studio'] for slot in schedule_69_615 
                for lesson in slot['lessons'] if lesson['studio'] != 'Unknown'
            ))
        }
    }
    
    # Save to JSON file
    output_file = 'Private_lesson_Calendar_COMBINED_ANALYSIS.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(comprehensive_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nComprehensive JSON saved to: {output_file}")
    
    # Display summary statistics
    print("\n=== ANALYSIS SUMMARY ===")
    stats = comprehensive_data['statistics']
    print(f"Total time slots analyzed: {stats['total_time_slots']}")
    print(f"Total lessons in 99-915: {stats['total_lessons_99_915']}")
    print(f"Total lessons in 69-615: {stats['total_lessons_69_615']}")
    print(f"Unique teachers identified: {stats['unique_teachers_identified']}")
    print(f"Studios used: {', '.join(stats['studios_used'])}")
    
    # Display sample data
    print("\n=== SAMPLE DATA FROM 99-915 ===")
    if schedule_99_915:
        sample = schedule_99_915[0]
        print(f"Time: {sample['time']}")
        for lesson in sample['lessons']:
            print(f"  {lesson['day']} ({lesson['date']}): {lesson['lesson_details']}")
    
    print("\n=== SAMPLE DATA FROM 69-615 ===")
    if schedule_69_615:
        sample = schedule_69_615[0]
        print(f"Time: {sample['time']}")
        for lesson in sample['lessons']:
            print(f"  {lesson['day']} {lesson['studio']} ({lesson['date']}): {lesson['lesson_details']}")
            if lesson['teacher_id']:
                print(f"    Teacher: {lesson['teacher_id']} (Color: {lesson['teacher_color']})")
    
    return comprehensive_data

if __name__ == "__main__":
    comprehensive_data = create_comprehensive_json()
