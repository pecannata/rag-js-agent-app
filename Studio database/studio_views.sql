-- Studio Manager Database Views
-- All views prefixed with STUDIO_

-- Complete student information with class enrollments
CREATE OR REPLACE VIEW STUDIO_STUDENTS_V AS
SELECT 
    s.STUDENT_ID,
    s.STUDENT_NAME,
    s.PARENT_FIRST_NAME,
    s.PARENT_LAST_NAME,
    s.CONTACT_EMAIL,
    s.CONTACT_PHONE,
    s.BIRTH_DATE,
    s.AGE,
    s.AUDITION_STATUS,
    s.NOTES,
    s.CREATED_DATE,
    s.MODIFIED_DATE,
    -- Class enrollment flags
    CASE WHEN EXISTS (
        SELECT 1 FROM STUDIO_STUDENT_CLASSES sc 
        JOIN STUDIO_CLASS_TYPES ct ON sc.CLASS_TYPE_ID = ct.CLASS_TYPE_ID 
        WHERE sc.STUDENT_ID = s.STUDENT_ID 
        AND ct.CLASS_TYPE_CODE = 'AUD_PREP' 
        AND sc.STATUS = 'ACTIVE'
    ) THEN 'Y' ELSE 'N' END AS AUDITION_PREP,
    
    CASE WHEN EXISTS (
        SELECT 1 FROM STUDIO_STUDENT_CLASSES sc 
        JOIN STUDIO_CLASS_TYPES ct ON sc.CLASS_TYPE_ID = ct.CLASS_TYPE_ID 
        WHERE sc.STUDENT_ID = s.STUDENT_ID 
        AND ct.CLASS_TYPE_CODE = 'TECH_INT' 
        AND sc.STATUS = 'ACTIVE'
    ) THEN 'Y' ELSE 'N' END AS TECHNIQUE_INTENSIVE,
    
    CASE WHEN EXISTS (
        SELECT 1 FROM STUDIO_STUDENT_CLASSES sc 
        JOIN STUDIO_CLASS_TYPES ct ON sc.CLASS_TYPE_ID = ct.CLASS_TYPE_ID 
        WHERE sc.STUDENT_ID = s.STUDENT_ID 
        AND ct.CLASS_TYPE_CODE = 'BALLET_INT' 
        AND sc.STATUS = 'ACTIVE'
    ) THEN 'Y' ELSE 'N' END AS BALLET_INTENSIVE,
    
    CASE WHEN EXISTS (
        SELECT 1 FROM STUDIO_STUDENT_CLASSES sc 
        JOIN STUDIO_CLASS_TYPES ct ON sc.CLASS_TYPE_ID = ct.CLASS_TYPE_ID 
        WHERE sc.STUDENT_ID = s.STUDENT_ID 
        AND ct.CLASS_TYPE_CODE = 'MASTER_INT' 
        AND sc.STATUS = 'ACTIVE'
    ) THEN 'Y' ELSE 'N' END AS MASTER_INTENSIVE,
    
    -- Age group classification
    CASE 
        WHEN s.AGE BETWEEN 4 AND 7 THEN 'Minis'
        WHEN s.AGE BETWEEN 8 AND 11 THEN 'Juniors'
        WHEN s.AGE BETWEEN 12 AND 15 THEN 'Teens'
        WHEN s.AGE >= 16 THEN 'Seniors'
        ELSE 'Unknown'
    END AS AGE_GROUP
FROM STUDIO_STUDENTS s;

-- Weekly schedule with student information
CREATE OR REPLACE VIEW STUDIO_WEEKLY_SCHEDULE_V AS
SELECT 
    ws.SCHEDULE_ID,
    ws.WEEK_START_DATE,
    ws.WEEK_END_DATE,
    ss.SLOT_ID,
    ss.DAY_OF_WEEK,
    ss.TIME_SLOT,
    ss.LESSON_TYPE,
    ss.NOTES AS SLOT_NOTES,
    ss.STATUS AS SLOT_STATUS,
    s.STUDENT_ID,
    s.STUDENT_NAME,
    s.PARENT_FIRST_NAME,
    s.PARENT_LAST_NAME,
    s.CONTACT_EMAIL,
    s.AGE,
    s.AGE_GROUP
FROM STUDIO_WEEKLY_SCHEDULES ws
LEFT JOIN STUDIO_SCHEDULE_SLOTS ss ON ws.SCHEDULE_ID = ss.SCHEDULE_ID
LEFT JOIN STUDIO_STUDENTS_V s ON ss.STUDENT_ID = s.STUDENT_ID
WHERE ws.STATUS = 'ACTIVE'
ORDER BY ws.WEEK_START_DATE, ss.DAY_OF_WEEK, ss.TIME_SLOT;

-- Analytics view for dashboard
CREATE OR REPLACE VIEW STUDIO_ANALYTICS_V AS
SELECT 
    -- Total counts
    (SELECT COUNT(*) FROM STUDIO_STUDENTS) AS TOTAL_STUDENTS,
    (SELECT COUNT(*) FROM STUDIO_STUDENTS WHERE AGE BETWEEN 4 AND 7) AS MINIS_COUNT,
    (SELECT COUNT(*) FROM STUDIO_STUDENTS WHERE AGE BETWEEN 8 AND 11) AS JUNIORS_COUNT,
    (SELECT COUNT(*) FROM STUDIO_STUDENTS WHERE AGE BETWEEN 12 AND 15) AS TEENS_COUNT,
    (SELECT COUNT(*) FROM STUDIO_STUDENTS WHERE AGE >= 16) AS SENIORS_COUNT,
    
    -- Class enrollment counts
    (SELECT COUNT(DISTINCT sc.STUDENT_ID) 
     FROM STUDIO_STUDENT_CLASSES sc 
     JOIN STUDIO_CLASS_TYPES ct ON sc.CLASS_TYPE_ID = ct.CLASS_TYPE_ID 
     WHERE ct.CLASS_TYPE_CODE = 'AUD_PREP' AND sc.STATUS = 'ACTIVE') AS AUDITION_PREP_COUNT,
     
    (SELECT COUNT(DISTINCT sc.STUDENT_ID) 
     FROM STUDIO_STUDENT_CLASSES sc 
     JOIN STUDIO_CLASS_TYPES ct ON sc.CLASS_TYPE_ID = ct.CLASS_TYPE_ID 
     WHERE ct.CLASS_TYPE_CODE = 'TECH_INT' AND sc.STATUS = 'ACTIVE') AS TECHNIQUE_INTENSIVE_COUNT,
     
    (SELECT COUNT(DISTINCT sc.STUDENT_ID) 
     FROM STUDIO_STUDENT_CLASSES sc 
     JOIN STUDIO_CLASS_TYPES ct ON sc.CLASS_TYPE_ID = ct.CLASS_TYPE_ID 
     WHERE ct.CLASS_TYPE_CODE = 'BALLET_INT' AND sc.STATUS = 'ACTIVE') AS BALLET_INTENSIVE_COUNT,
     
    (SELECT COUNT(DISTINCT sc.STUDENT_ID) 
     FROM STUDIO_STUDENT_CLASSES sc 
     JOIN STUDIO_CLASS_TYPES ct ON sc.CLASS_TYPE_ID = ct.CLASS_TYPE_ID 
     WHERE ct.CLASS_TYPE_CODE = 'MASTER_INT' AND sc.STATUS = 'ACTIVE') AS MASTER_INTENSIVE_COUNT,
    
    -- Current week lesson count
    (SELECT COUNT(*) 
     FROM STUDIO_SCHEDULE_SLOTS ss 
     JOIN STUDIO_WEEKLY_SCHEDULES ws ON ss.SCHEDULE_ID = ws.SCHEDULE_ID 
     WHERE ws.WEEK_START_DATE = (
         SELECT MAX(WEEK_START_DATE) 
         FROM STUDIO_WEEKLY_SCHEDULES 
         WHERE WEEK_START_DATE <= SYSDATE
     ) AND ss.STATUS = 'ACTIVE') AS CURRENT_WEEK_LESSONS
FROM DUAL;

-- Student class enrollment details
CREATE OR REPLACE VIEW STUDIO_STUDENT_ENROLLMENTS_V AS
SELECT 
    sc.ENROLLMENT_ID,
    sc.STUDENT_ID,
    s.STUDENT_NAME,
    ct.CLASS_TYPE_ID,
    ct.CLASS_TYPE_NAME,
    ct.CLASS_TYPE_CODE,
    sc.ENROLLMENT_DATE,
    sc.STATUS,
    sc.CREATED_DATE,
    sc.MODIFIED_DATE
FROM STUDIO_STUDENT_CLASSES sc
JOIN STUDIO_STUDENTS s ON sc.STUDENT_ID = s.STUDENT_ID
JOIN STUDIO_CLASS_TYPES ct ON sc.CLASS_TYPE_ID = ct.CLASS_TYPE_ID
ORDER BY s.STUDENT_NAME, ct.CLASS_TYPE_NAME;

-- Attendance summary view
CREATE OR REPLACE VIEW STUDIO_ATTENDANCE_SUMMARY_V AS
SELECT 
    s.STUDENT_ID,
    s.STUDENT_NAME,
    ct.CLASS_TYPE_NAME,
    COUNT(*) AS TOTAL_CLASSES,
    SUM(CASE WHEN a.STATUS = 'PRESENT' THEN 1 ELSE 0 END) AS PRESENT_COUNT,
    SUM(CASE WHEN a.STATUS = 'ABSENT' THEN 1 ELSE 0 END) AS ABSENT_COUNT,
    SUM(CASE WHEN a.STATUS = 'EXCUSED' THEN 1 ELSE 0 END) AS EXCUSED_COUNT,
    SUM(CASE WHEN a.STATUS = 'LATE' THEN 1 ELSE 0 END) AS LATE_COUNT,
    ROUND(
        (SUM(CASE WHEN a.STATUS = 'PRESENT' THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2
    ) AS ATTENDANCE_PERCENTAGE
FROM STUDIO_STUDENTS s
JOIN STUDIO_ATTENDANCE a ON s.STUDENT_ID = a.STUDENT_ID
JOIN STUDIO_CLASS_TYPES ct ON a.CLASS_TYPE_ID = ct.CLASS_TYPE_ID
GROUP BY s.STUDENT_ID, s.STUDENT_NAME, ct.CLASS_TYPE_NAME, ct.CLASS_TYPE_ID
ORDER BY s.STUDENT_NAME, ct.CLASS_TYPE_NAME;

-- Schedule conflicts view
CREATE OR REPLACE VIEW STUDIO_SCHEDULE_CONFLICTS_V AS
SELECT 
    ss1.SLOT_ID AS SLOT_ID_1,
    ss1.STUDENT_ID AS STUDENT_ID_1,
    s1.STUDENT_NAME AS STUDENT_NAME_1,
    ss2.SLOT_ID AS SLOT_ID_2,
    ss2.STUDENT_ID AS STUDENT_ID_2,
    s2.STUDENT_NAME AS STUDENT_NAME_2,
    ss1.DAY_OF_WEEK,
    ss1.TIME_SLOT,
    ws.WEEK_START_DATE
FROM STUDIO_SCHEDULE_SLOTS ss1
JOIN STUDIO_SCHEDULE_SLOTS ss2 ON ss1.SCHEDULE_ID = ss2.SCHEDULE_ID
    AND ss1.DAY_OF_WEEK = ss2.DAY_OF_WEEK
    AND ss1.TIME_SLOT = ss2.TIME_SLOT
    AND ss1.SLOT_ID < ss2.SLOT_ID
JOIN STUDIO_WEEKLY_SCHEDULES ws ON ss1.SCHEDULE_ID = ws.SCHEDULE_ID
LEFT JOIN STUDIO_STUDENTS s1 ON ss1.STUDENT_ID = s1.STUDENT_ID
LEFT JOIN STUDIO_STUDENTS s2 ON ss2.STUDENT_ID = s2.STUDENT_ID
WHERE ss1.STATUS = 'ACTIVE' AND ss2.STATUS = 'ACTIVE'
ORDER BY ws.WEEK_START_DATE, ss1.DAY_OF_WEEK, ss1.TIME_SLOT;
