-- Studio Manager Database Schema
-- All objects prefixed with STUDIO_

-- Students table
CREATE TABLE STUDIO_STUDENTS (
    STUDENT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    STUDENT_NAME VARCHAR2(100) NOT NULL,
    PARENT_FIRST_NAME VARCHAR2(50),
    PARENT_LAST_NAME VARCHAR2(50),
    CONTACT_EMAIL VARCHAR2(255),
    CONTACT_PHONE VARCHAR2(20),
    BIRTH_DATE DATE,
    AGE NUMBER(3),
    AUDITION_STATUS VARCHAR2(20) DEFAULT 'Both',
    NOTES CLOB,
    CREATED_DATE DATE DEFAULT SYSDATE,
    MODIFIED_DATE DATE DEFAULT SYSDATE,
    CREATED_BY VARCHAR2(100),
    MODIFIED_BY VARCHAR2(100)
);

-- Class types lookup table
CREATE TABLE STUDIO_CLASS_TYPES (
    CLASS_TYPE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CLASS_TYPE_NAME VARCHAR2(50) NOT NULL UNIQUE,
    CLASS_TYPE_CODE VARCHAR2(20) NOT NULL UNIQUE,
    DESCRIPTION VARCHAR2(255),
    IS_ACTIVE CHAR(1) DEFAULT 'Y',
    CREATED_DATE DATE DEFAULT SYSDATE
);

-- Student class enrollments
CREATE TABLE STUDIO_STUDENT_CLASSES (
    ENROLLMENT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    STUDENT_ID NUMBER NOT NULL,
    CLASS_TYPE_ID NUMBER NOT NULL,
    ENROLLMENT_DATE DATE DEFAULT SYSDATE,
    STATUS VARCHAR2(20) DEFAULT 'ACTIVE',
    CREATED_DATE DATE DEFAULT SYSDATE,
    MODIFIED_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT FK_STUDIO_SC_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDIO_STUDENTS(STUDENT_ID),
    CONSTRAINT FK_STUDIO_SC_CLASS_TYPE FOREIGN KEY (CLASS_TYPE_ID) REFERENCES STUDIO_CLASS_TYPES(CLASS_TYPE_ID),
    CONSTRAINT UQ_STUDIO_SC_STUDENT_CLASS UNIQUE (STUDENT_ID, CLASS_TYPE_ID)
);

-- Weekly schedules
CREATE TABLE STUDIO_WEEKLY_SCHEDULES (
    SCHEDULE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    WEEK_START_DATE DATE NOT NULL,
    WEEK_END_DATE DATE,
    STATUS VARCHAR2(20) DEFAULT 'ACTIVE',
    CREATED_DATE DATE DEFAULT SYSDATE,
    MODIFIED_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT UQ_STUDIO_WS_WEEK UNIQUE (WEEK_START_DATE)
);

-- Schedule slots
CREATE TABLE STUDIO_SCHEDULE_SLOTS (
    SLOT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SCHEDULE_ID NUMBER NOT NULL,
    STUDENT_ID NUMBER,
    DAY_OF_WEEK VARCHAR2(10) NOT NULL,
    TIME_SLOT VARCHAR2(10) NOT NULL,
    LESSON_TYPE VARCHAR2(50) DEFAULT 'Solo',
    NOTES VARCHAR2(500),
    STATUS VARCHAR2(20) DEFAULT 'ACTIVE',
    CREATED_DATE DATE DEFAULT SYSDATE,
    MODIFIED_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT FK_STUDIO_SS_SCHEDULE FOREIGN KEY (SCHEDULE_ID) REFERENCES STUDIO_WEEKLY_SCHEDULES(SCHEDULE_ID),
    CONSTRAINT FK_STUDIO_SS_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDIO_STUDENTS(STUDENT_ID),
    CONSTRAINT CHK_STUDIO_SS_DAY CHECK (DAY_OF_WEEK IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'))
);

-- Attendance tracking
CREATE TABLE STUDIO_ATTENDANCE (
    ATTENDANCE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    STUDENT_ID NUMBER NOT NULL,
    CLASS_TYPE_ID NUMBER NOT NULL,
    ATTENDANCE_DATE DATE NOT NULL,
    STATUS VARCHAR2(20) DEFAULT 'PRESENT',
    NOTES VARCHAR2(500),
    CREATED_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT FK_STUDIO_ATT_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDIO_STUDENTS(STUDENT_ID),
    CONSTRAINT FK_STUDIO_ATT_CLASS_TYPE FOREIGN KEY (CLASS_TYPE_ID) REFERENCES STUDIO_CLASS_TYPES(CLASS_TYPE_ID),
    CONSTRAINT CHK_STUDIO_ATT_STATUS CHECK (STATUS IN ('PRESENT', 'ABSENT', 'EXCUSED', 'LATE'))
);

-- Indexes for performance
CREATE INDEX IDX_STUDIO_STUDENTS_NAME ON STUDIO_STUDENTS(STUDENT_NAME);
CREATE INDEX IDX_STUDIO_STUDENTS_EMAIL ON STUDIO_STUDENTS(CONTACT_EMAIL);
CREATE INDEX IDX_STUDIO_STUDENTS_AGE ON STUDIO_STUDENTS(AGE);
CREATE INDEX IDX_STUDIO_SCHEDULE_SLOTS_DAY ON STUDIO_SCHEDULE_SLOTS(DAY_OF_WEEK);
CREATE INDEX IDX_STUDIO_SCHEDULE_SLOTS_TIME ON STUDIO_SCHEDULE_SLOTS(TIME_SLOT);
CREATE INDEX IDX_STUDIO_ATTENDANCE_DATE ON STUDIO_ATTENDANCE(ATTENDANCE_DATE);

-- Triggers for automatic timestamp updates
CREATE OR REPLACE TRIGGER TRG_STUDIO_STUDENTS_UPD
    BEFORE UPDATE ON STUDIO_STUDENTS
    FOR EACH ROW
BEGIN
    :NEW.MODIFIED_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER TRG_STUDIO_STUDENT_CLASSES_UPD
    BEFORE UPDATE ON STUDIO_STUDENT_CLASSES
    FOR EACH ROW
BEGIN
    :NEW.MODIFIED_DATE := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER TRG_STUDIO_WEEKLY_SCHEDULES_UPD
    BEFORE UPDATE ON STUDIO_WEEKLY_SCHEDULES
    FOR EACH ROW
BEGIN
    :NEW.MODIFIED_DATE := SYSDATE;
    :NEW.WEEK_END_DATE := :NEW.WEEK_START_DATE + 6;
END;
/

CREATE OR REPLACE TRIGGER TRG_STUDIO_SCHEDULE_SLOTS_UPD
    BEFORE UPDATE ON STUDIO_SCHEDULE_SLOTS
    FOR EACH ROW
BEGIN
    :NEW.MODIFIED_DATE := SYSDATE;
END;
/

-- Trigger to calculate age from birth date
CREATE OR REPLACE TRIGGER TRG_STUDIO_STUDENTS_AGE
    BEFORE INSERT OR UPDATE ON STUDIO_STUDENTS
    FOR EACH ROW
BEGIN
    IF :NEW.BIRTH_DATE IS NOT NULL THEN
        :NEW.AGE := FLOOR(MONTHS_BETWEEN(SYSDATE, :NEW.BIRTH_DATE) / 12);
    END IF;
END;
/

-- Insert default class types
INSERT INTO STUDIO_CLASS_TYPES (CLASS_TYPE_NAME, CLASS_TYPE_CODE, DESCRIPTION) VALUES 
('Audition Prep', 'AUD_PREP', 'Audition preparation class');

INSERT INTO STUDIO_CLASS_TYPES (CLASS_TYPE_NAME, CLASS_TYPE_CODE, DESCRIPTION) VALUES 
('Technique Intensive', 'TECH_INT', 'Technical skill intensive training');

INSERT INTO STUDIO_CLASS_TYPES (CLASS_TYPE_NAME, CLASS_TYPE_CODE, DESCRIPTION) VALUES 
('Ballet Intensive', 'BALLET_INT', 'Ballet intensive training');

INSERT INTO STUDIO_CLASS_TYPES (CLASS_TYPE_NAME, CLASS_TYPE_CODE, DESCRIPTION) VALUES 
('Master Intensive', 'MASTER_INT', 'Master level intensive training');

COMMIT;
