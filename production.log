
> rag-js-agent-app@1.0.224 start
> next start

   ▲ Next.js 15.3.4
   - Local:        http://localhost:3000
   - Network:      http://192.168.1.149:3000

 ✓ Starting...
 ✓ Ready in 393ms
📧 Background job processor initialized
(node:63030) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
✅ Ollama service is available and ready

🚀 Starting ReAct Domain Analysis...
🤔 ReAct Domain Checker - Analyzing semantic similarity...
Context Keywords: Employee
User Message: How many employees did you find? And find the manager of each employee and tell me the department name of the manager and the location of the manager including the location's state (in a separate column) and the current population of the state (in a separate column) and the surrounding states. Even if values are null, please put each employee, manager, department, state, population, and a list of surrounding states in one table at the end of your analysis.
🎯 Domain Analysis Result: {
  shouldExecute: true,
  reasoning: "The user message is clearly discussing employees, managers of those employees, and the departments and locations associated with these roles. The context keyword 'Employee' directly aligns with the query about finding employees and their managerial information.",
  confidence: 1,
  thresholdMet: true
}
✅ Domain analysis PASSED - Executing database query
🔍 Executing Oracle database query: select * from emp join dept on emp.deptno = dept.deptno
✅ Database query executed successfully
🧠 Starting multi-step ReAct analysis...
🕰️ Starting LLM analysis with timeout...
🔍 Query being analyzed: How many employees did you find? And find the manager of each employee and tell me the department name of the manager and the location of the manager including the location's state (in a separate column) and the current population of the state (in a separate column) and the surrounding states. Even if values are null, please put each employee, manager, department, state, population, and a list of surrounding states in one table at the end of your analysis.
🗃️ Database available: Yes
🔑 SerpAPI key available: Yes (...7bc4)
✅ LLM analysis completed
📝 Step Analysis Response: {
  "steps": [
    {
      "step": 1,
      "description": "Count the number of employees in the database.",
      "method": "database",
      "needsExecution": true,
      "searchQuery": "",
      "confidence": 1.0
    },
    {
      "step": 2,
      "description": "Find the manager for each employee and their department name.",
      "method": "database",
      "needsExecution": true,
      "searchQuery": "",
      "confidence": 1.0
    },
    {
      "step": 3,
      "description": "Retrieve ...
🎯 Multi-step Analysis: {
  totalSteps: 5,
  needsWebSearch: true,
  webSearchSteps: [
    'Find the current population of the state where each manager is located.'
  ]
}
🌐 Executing 1 web search step(s)...
🔧 Enhanced search query: ""current population of Dallas, Texas in 2025""
🔍 Step 4: Searching for ""current population of Dallas, Texas in 2025""
🌐 SERPAPI CALL INITIATED
🔍 SerpAPI Query: "current population of Dallas, Texas in 2025"
🔑 SerpAPI Key: ...0bb87bc4
❌ SERPAPI CALL FAILED: {
  "error": "Your account has run out of searches."
}
📊 Database result available for LLM context
📊 Database contains 1 rows of data
📊 Database data preview: {"results":[{"columns":[{"name":"EMPNO","type":"NUMBER"},{"name":"ENAME","type":"VARCHAR2"},{"name":"JOB","type":"VARCHAR2"},{"name":"MGR","type":"NUMBER"},{"name":"HIREDATE","type":"DATE"},{"name":"S...
📊 Database context length: 4938 characters
📝 Final prompt length: 6003
📝 Database context included: true
📝 Web search context included: false
📝 Knowledge context included: false
✅ Database context: ALL ROWS PRESERVED (no truncation)
📊 Database context: preserved 1 rows
📝 Prompt preview (last 500 chars):     "deptno": 30,
          "dname": "SALES",
          "loc": "CHICAGO"
        },
        {
          "empno": 7698,
          "ename": "BLAKE",
          "job": "MANAGER",
          "mgr": 7839,
          "hiredate": "01-MAY-81",
          "sal": 2850,
          "comm": "",
          "deptno": 30,
          "dname": "SALES",
          "loc": "CHICAGO"
        }
      ]
    }
  ]
}

Thought: Let me analyze this request and provide a helpful response using the available information.

Assistant:
📊 Detected 14 database records in final prompt
🔍 Blog Database Query Execution: SELECT COUNT(*) as count FROM blog_posts WHERE ROWNUM <= 1
✅ Blog database query executed successfully
📤 Raw Oracle Output (first 500 chars): 
{
  "results" : [
    {
      "columns" : [
        {
          "name" : "COUNT",
          "type" : "NUMBER"
        }
      ],
      "items" : [
        {
          "count" : 1
        }
      ]
    }
  ]
}
✅ Successfully parsed as JSON. Structure: {
  "results": [
    {
      "columns": [
        {
          "name": "COUNT",
          "type": "NUMBER"
        }
      ],
      "items": [
        {
          "count": 1
        }
      ]
    }
  ]
}
✅ Extracted Oracle items: 1 rows
✅ Blog posts table already exists (verified by query)
🔍 Blog Database Query Execution: 
      SELECT 
        id,
        title,
        slug,
        content,
        excerpt,
        author,
        status,
        tags,
        TO_CHAR(created_at, 'YYYY-MM-DD"T"HH24:MI:SS"Z"') as cre...
✅ Blog database query executed successfully
📤 Raw Oracle Output (first 500 chars): 
{
  "results" : [
    {
      "columns" : [
        {
          "name" : "ID",
          "type" : "NUMBER"
        },
        {
          "name" : "TITLE",
          "type" : "VARCHAR2"
        },
        {
          "name" : "SLUG",
          "type" : "VARCHAR2"
        },
        {
          "name" : "CONTENT",
          "type" : "CLOB"
        },
        {
          "name" : "EXCERPT",
          "type" : "VARCHAR2"
        },
        {
          "name" : "AUTHOR",
          "type" : "VARCHAR...
✅ Successfully parsed as JSON. Structure: {
  "results": [
    {
      "columns": [
        {
          "name": "ID",
          "type": "NUMBER"
        },
        {
          "name": "TITLE",
          "type": "VARCHAR2"
        },
        {
          "name": "SLUG",
          "type": "VARCHAR2"
        },
        {
          "name": "CONTENT",
          "type": "CLOB"
        },
        {
          "name": "EXCERPT",
          "type": "VARCHAR2"
        },
        {
          "name": "AUTHOR",
          "type": "VARCHAR2"
        },
 
✅ Extracted Oracle items: 2 rows
📊 Blog query result structure: object true 2
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        s.STUDENT_ID,
        s.STUDENT_NAME,
        s.PARENT_FIRST_NAME,
        s.PARENT_LAST_NAME,
        s.CONTACT_EMAIL,
        s.CONTACT_PHONE,
        TO_CHAR(s.BIRTH_DATE, 'YYYY-MM-DD') as BIRTH_DATE_STR,
        FLOOR(MONTHS_BETWEEN(SYSDATE, s.BIRTH_DATE) / 12) as AGE,
        s.AUDITION_STATUS,
        s.NOTES,
        'N' as AUDITION_PREP,
        'N' as TECHNIQUE_INTENSIVE,
        'N' as BALLET_INTENSIVE,
        'N' as MASTER_INTENSIVE
      FROM STUDIO_STUDENTS s
📊 Query length: 529
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        s.STUDENT_ID,
        s.STUDENT_NAME,
        s.PARENT_FIRST_NAME,
        s.PARENT_LAST_NAME,
        s.CONTACT_EMAIL,
        s.CONTACT_PHONE,
        T
📊 Query length: 529
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
     WHERE WEEK_START_DATE = TO_DATE('2025-06-09', 'YYYY-MM-DD')
📊 Query length: 237
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
    
📊 Query length: 237
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        TEACHER_ID,
        TEACHER_NAME,
        FIRST_NAME,
        LAST_NAME,
        EMAIL,
        PHONE,
        SPECIALTIES,
        STATUS,
        NOTES,
        PRICE,
        CREATED_DATE,
        MODIFIED_DATE
      FROM STUDIO_TEACHERS
     ORDER BY TEACHER_NAME
📊 Query length: 290
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        TEACHER_ID,
        TEACHER_NAME,
        FIRST_NAME,
        LAST_NAME,
        EMAIL,
        PHONE,
        SPECIALTIES,
        STATUS,
        NOTES,
📊 Query length: 290
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as week_start,
        TO_CHAR(WEEK_START_DATE, 'DD-MON-YY') as formatted_date,
        LESSON_ID as lesson_id
      FROM STUDIO_PRIVATE_LESSONS
      ORDER BY WEEK_START_DATE DESC
    
📊 Query length: 247
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as week_start,
        TO_CHAR(WEEK_START_DATE, 'DD-MON-YY') as formatted_date,
        LESSON_ID as lesson_id
    
📊 Query length: 247
✅ Database query executed successfully
📤 Output length: 14988
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"WEEKOF\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"LESSONID\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"WEEKDATA\",\n          \"type\" : \"CLOB\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"weekof\" : \"2025-06-09\",\n          \"lessonid\" : \"\",\n          \"weekdata\" : \"{\\\"week_info\\\":{\\\"sheet_name\\\":\\\"69 -615\\\",\\\"week_identifier\\\":\\\"2025-07-14-69 -615\\\",\\\"source_file\\\":\\\"Private lesson Calendar 1 tab.xlsx\\\"},\\\"teachers\\\":{\\\"MEGHAN\\\":\\\"#EAD1DC\\\",\\\"RYANN\\\":\\\"#C9DAF8\\\",\\\"PAIGE\\\":\\\"#FFF2CC\\\",\\\"GRACIE\\\":\\\"#D9EAD3\\\",\\\"CARALIN ( BALLET TEACHER)\\\":\\\"#D9D2E9\\\",\\\"HUNTER\\\":\\\"#F6B26B\\\",\\\"Reese\\\":\\\"#FFF2CC\\\",\\\"Kaylee Kaloustian\\\":\\\"#A4C2F4\\\",\\\"Mia Tubbs\\\":\\\"#A4C2F4\\\",\\\"Vivian Fincher\\\":\\\"#FFF2...[TRUNCATED]
📖 Loading schedule data: {
  "weekof": "2025-06-09",
  "lessonid": "",
  "weekdata": "{\"week_info\":{\"sheet_name\":\"69 -615\",\"week_identifier\":\"2025-07-14-69 -615\",\"source_file\":\"Private lesson Calendar 1 tab.xlsx\"},\"teachers\":{\"MEGHAN\":\"#EAD1DC\",\"RYANN\":\"#C9DAF8\",\"PAIGE\":\"#FFF2CC\",\"GRACIE\":\"#D9EAD3\",\"CARALIN ( BALLET TEACHER)\":\"#D9D2E9\",\"HUNTER\":\"#F6B26B\",\"Reese\":\"#FFF2CC\",\"Kaylee Kaloustian\":\"#A4C2F4\",\"Mia Tubbs\":\"#A4C2F4\",\"Vivian Fincher\":\"#FFF2CC\",\"Alia Pollema Solo\":\"#A4C2F4\",\"Everly/Larkin\":\"#A4C2F4\",\"Marik solo\":\"#A4C2F4\",\"Everly solo\":\"#EAD1DC\",\"Mila\":\"#EAD1DC\",\"Everly /Larkin\":\"#A4C2F4\",\"Gabi M\":\"#00FF00\",\"Marik\":\"#A4C2F4\",\"Larkin\":\"#EAD1DC\",\"Mia W\":\"#A4C2F4\",\"Everly\":\"#EAD1DC\",\"Kinley\":\"#B4A7D6\",\"Kinley - technique / solo\":\"#FFF2CC\",\"Kinley - solo\":\"#A4C2F4\",\"Hazel\":\"#FFF2CC\",\"Larkin/everly technique\":\"#A4C2F4\",\"Hazel- tech\":\"#A4C2F4\",\"Vivi Fincher\":\"#FFF2CC\",\"Hazel- solos\":...[TRUNCATED]
🔄 Parsed week data: {
  "week_info": {
    "sheet_name": "69 -615",
    "week_identifier": "2025-07-14-69 -615",
    "source_file": "Private lesson Calendar 1 tab.xlsx"
  },
  "teachers": {
    "MEGHAN": "#EAD1DC",
    "RYANN": "#C9DAF8",
    "PAIGE": "#FFF2CC",
    "GRACIE": "#D9EAD3",
    "CARALIN ( BALLET TEACHER)": "#D9D2E9",
    "HUNTER": "#F6B26B",
    "Reese": "#FFF2CC",
    "Kaylee Kaloustian": "#A4C2F4",
    "Mia Tubbs": "#A4C2F4",
    "Vivian Fincher": "#FFF2CC",
    "Alia Pollema Solo": "#A4C2F4",
    "Everly/Larkin": "#A4C2F4",
    "Marik solo": "#A4C2F4",
    "Everly solo": "#EAD1DC",
    "Mila": "#EAD1DC",
    "Everly /Larkin": "#A4C2F4",
    "Gabi M": "#00FF00",
    "Marik": "#A4C2F4",
    "Larkin": "#EAD1DC",
    "Mia W": "#A4C2F4",
    "Everly": "#EAD1DC",
    "Kinley": "#B4A7D6",
    "Kinley - technique / solo": "#FFF2CC",
    "Kinley - solo": "#A4C2F4",
    "Hazel": "#FFF2CC",
    "Larkin/everly technique": "#A4C2F4",
    "Hazel- tech": "#A4C2F4",
    "Vivi Fincher": "#FFF2CC",
    "Haz...[TRUNCATED]
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
     WHERE WEEK_START_DATE = TO_DATE('2025-06-09', 'YYYY-MM-DD')
📊 Query length: 237
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
    
📊 Query length: 237
✅ Database query executed successfully
📤 Output length: 19842
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"STUDENT_ID\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n          \"name\" : \"STUDENT_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PARENT_FIRST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PARENT_LAST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"CONTACT_EMAIL\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"CONTACT_PHONE\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"BIRTH_DATE_STR\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"AGE\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n          \"name\" : \"AUDITION_STATUS\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"NOTES\",\n          \"type\"...[TRUNCATED]
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        s.STUDENT_ID,
        s.STUDENT_NAME,
        s.PARENT_FIRST_NAME,
        s.PARENT_LAST_NAME,
        s.CONTACT_EMAIL,
        s.CONTACT_PHONE,
        TO_CHAR(s.BIRTH_DATE, 'YYYY-MM-DD') as BIRTH_DATE_STR,
        FLOOR(MONTHS_BETWEEN(SYSDATE, s.BIRTH_DATE) / 12) as AGE,
        s.AUDITION_STATUS,
        s.NOTES,
        'N' as AUDITION_PREP,
        'N' as TECHNIQUE_INTENSIVE,
        'N' as BALLET_INTENSIVE,
        'N' as MASTER_INTENSIVE
      FROM STUDIO_STUDENTS s
📊 Query length: 529
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        s.STUDENT_ID,
        s.STUDENT_NAME,
        s.PARENT_FIRST_NAME,
        s.PARENT_LAST_NAME,
        s.CONTACT_EMAIL,
        s.CONTACT_PHONE,
        T
📊 Query length: 529
✅ Database query executed successfully
📤 Output length: 473
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"WEEK_START\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"FORMATTED_DATE\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"LESSON_ID\",\n          \"type\" : \"VARCHAR2\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"week_start\" : \"2025-06-09\",\n          \"formatted_date\" : \"09-JUN-25\",\n          \"lesson_id\" : \"\"\n        }\n      ]\n    }\n  ]\n}"
✅ Database query executed successfully
📤 Output length: 8796
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"TEACHER_ID\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n          \"name\" : \"TEACHER_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"FIRST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"LAST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"EMAIL\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PHONE\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"SPECIALTIES\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"STATUS\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"NOTES\",\n          \"type\" : \"CLOB\"\n        },\n        {\n          \"name\" : \"PRICE\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n    ...[TRUNCATED]
✅ Database query executed successfully
📤 Output length: 14988
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"WEEKOF\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"LESSONID\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"WEEKDATA\",\n          \"type\" : \"CLOB\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"weekof\" : \"2025-06-09\",\n          \"lessonid\" : \"\",\n          \"weekdata\" : \"{\\\"week_info\\\":{\\\"sheet_name\\\":\\\"69 -615\\\",\\\"week_identifier\\\":\\\"2025-07-14-69 -615\\\",\\\"source_file\\\":\\\"Private lesson Calendar 1 tab.xlsx\\\"},\\\"teachers\\\":{\\\"MEGHAN\\\":\\\"#EAD1DC\\\",\\\"RYANN\\\":\\\"#C9DAF8\\\",\\\"PAIGE\\\":\\\"#FFF2CC\\\",\\\"GRACIE\\\":\\\"#D9EAD3\\\",\\\"CARALIN ( BALLET TEACHER)\\\":\\\"#D9D2E9\\\",\\\"HUNTER\\\":\\\"#F6B26B\\\",\\\"Reese\\\":\\\"#FFF2CC\\\",\\\"Kaylee Kaloustian\\\":\\\"#A4C2F4\\\",\\\"Mia Tubbs\\\":\\\"#A4C2F4\\\",\\\"Vivian Fincher\\\":\\\"#FFF2...[TRUNCATED]
📖 Loading schedule data: {
  "weekof": "2025-06-09",
  "lessonid": "",
  "weekdata": "{\"week_info\":{\"sheet_name\":\"69 -615\",\"week_identifier\":\"2025-07-14-69 -615\",\"source_file\":\"Private lesson Calendar 1 tab.xlsx\"},\"teachers\":{\"MEGHAN\":\"#EAD1DC\",\"RYANN\":\"#C9DAF8\",\"PAIGE\":\"#FFF2CC\",\"GRACIE\":\"#D9EAD3\",\"CARALIN ( BALLET TEACHER)\":\"#D9D2E9\",\"HUNTER\":\"#F6B26B\",\"Reese\":\"#FFF2CC\",\"Kaylee Kaloustian\":\"#A4C2F4\",\"Mia Tubbs\":\"#A4C2F4\",\"Vivian Fincher\":\"#FFF2CC\",\"Alia Pollema Solo\":\"#A4C2F4\",\"Everly/Larkin\":\"#A4C2F4\",\"Marik solo\":\"#A4C2F4\",\"Everly solo\":\"#EAD1DC\",\"Mila\":\"#EAD1DC\",\"Everly /Larkin\":\"#A4C2F4\",\"Gabi M\":\"#00FF00\",\"Marik\":\"#A4C2F4\",\"Larkin\":\"#EAD1DC\",\"Mia W\":\"#A4C2F4\",\"Everly\":\"#EAD1DC\",\"Kinley\":\"#B4A7D6\",\"Kinley - technique / solo\":\"#FFF2CC\",\"Kinley - solo\":\"#A4C2F4\",\"Hazel\":\"#FFF2CC\",\"Larkin/everly technique\":\"#A4C2F4\",\"Hazel- tech\":\"#A4C2F4\",\"Vivi Fincher\":\"#FFF2CC\",\"Hazel- solos\":...[TRUNCATED]
🔄 Parsed week data: {
  "week_info": {
    "sheet_name": "69 -615",
    "week_identifier": "2025-07-14-69 -615",
    "source_file": "Private lesson Calendar 1 tab.xlsx"
  },
  "teachers": {
    "MEGHAN": "#EAD1DC",
    "RYANN": "#C9DAF8",
    "PAIGE": "#FFF2CC",
    "GRACIE": "#D9EAD3",
    "CARALIN ( BALLET TEACHER)": "#D9D2E9",
    "HUNTER": "#F6B26B",
    "Reese": "#FFF2CC",
    "Kaylee Kaloustian": "#A4C2F4",
    "Mia Tubbs": "#A4C2F4",
    "Vivian Fincher": "#FFF2CC",
    "Alia Pollema Solo": "#A4C2F4",
    "Everly/Larkin": "#A4C2F4",
    "Marik solo": "#A4C2F4",
    "Everly solo": "#EAD1DC",
    "Mila": "#EAD1DC",
    "Everly /Larkin": "#A4C2F4",
    "Gabi M": "#00FF00",
    "Marik": "#A4C2F4",
    "Larkin": "#EAD1DC",
    "Mia W": "#A4C2F4",
    "Everly": "#EAD1DC",
    "Kinley": "#B4A7D6",
    "Kinley - technique / solo": "#FFF2CC",
    "Kinley - solo": "#A4C2F4",
    "Hazel": "#FFF2CC",
    "Larkin/everly technique": "#A4C2F4",
    "Hazel- tech": "#A4C2F4",
    "Vivi Fincher": "#FFF2CC",
    "Haz...[TRUNCATED]
✅ Database query executed successfully
📤 Output length: 19842
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"STUDENT_ID\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n          \"name\" : \"STUDENT_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PARENT_FIRST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PARENT_LAST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"CONTACT_EMAIL\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"CONTACT_PHONE\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"BIRTH_DATE_STR\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"AGE\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n          \"name\" : \"AUDITION_STATUS\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"NOTES\",\n          \"type\"...[TRUNCATED]
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
      WHERE WEEK_START_DATE = TO_DATE('2025-06-09', 'YYYY-MM-DD')
    
📊 Query length: 243
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
    
📊 Query length: 243
🔍 Executing Oracle Database Query (first 500 chars): SELECT STUDENT_NAME, CONTACT_EMAIL FROM STUDIO_STUDENTS
📊 Query length: 55
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "SELECT STUDENT_NAME, CONTACT_EMAIL FROM STUDIO_STUDENTS"
📊 Query length: 55
🔍 Executing Oracle Database Query (first 500 chars): SELECT TEACHER_NAME, PRICE FROM STUDIO_TEACHERS
📊 Query length: 47
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "SELECT TEACHER_NAME, PRICE FROM STUDIO_TEACHERS"
📊 Query length: 47
✅ Database query executed successfully
📤 Output length: 1825
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"TEACHER_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PRICE\",\n          \"type\" : \"NUMBER\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"teacher_name\" : \"PAIGE\",\n          \"price\" : 40\n        },\n        {\n          \"teacher_name\" : \"MEGHAN\",\n          \"price\" : 40\n        },\n        {\n          \"teacher_name\" : \"solo\",\n          \"price\" : 50\n        },\n        {\n          \"teacher_name\" : \"solos\",\n          \"price\" : 50\n        },\n        {\n          \"teacher_name\" : \"tech\",\n          \"price\" : 40\n        },\n        {\n          \"teacher_name\" : \"technique\",\n          \"price\" : 40\n        },\n        {\n          \"teacher_name\" : \"Meghan Lajoie\",\n          \"price\" : 40\n        },\n        {\n          \"teacher_name\" : \"Hazel\",\n          \"price\" : 40\n        }...[TRUNCATED]
✅ Database query executed successfully
📤 Output length: 14988
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"WEEKOF\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"LESSONID\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"WEEKDATA\",\n          \"type\" : \"CLOB\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"weekof\" : \"2025-06-09\",\n          \"lessonid\" : \"\",\n          \"weekdata\" : \"{\\\"week_info\\\":{\\\"sheet_name\\\":\\\"69 -615\\\",\\\"week_identifier\\\":\\\"2025-07-14-69 -615\\\",\\\"source_file\\\":\\\"Private lesson Calendar 1 tab.xlsx\\\"},\\\"teachers\\\":{\\\"MEGHAN\\\":\\\"#EAD1DC\\\",\\\"RYANN\\\":\\\"#C9DAF8\\\",\\\"PAIGE\\\":\\\"#FFF2CC\\\",\\\"GRACIE\\\":\\\"#D9EAD3\\\",\\\"CARALIN ( BALLET TEACHER)\\\":\\\"#D9D2E9\\\",\\\"HUNTER\\\":\\\"#F6B26B\\\",\\\"Reese\\\":\\\"#FFF2CC\\\",\\\"Kaylee Kaloustian\\\":\\\"#A4C2F4\\\",\\\"Mia Tubbs\\\":\\\"#A4C2F4\\\",\\\"Vivian Fincher\\\":\\\"#FFF2...[TRUNCATED]
✅ Database query executed successfully
📤 Output length: 3928
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"STUDENT_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"CONTACT_EMAIL\",\n          \"type\" : \"VARCHAR2\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"student_name\" : \"Caralin Wilson\",\n          \"contact_email\" : \"awilson.dancer@gmail.com\"\n        },\n        {\n          \"student_name\" : \"Charlotte Brown\",\n          \"contact_email\" : \"ebrown.dance@gmail.com\"\n        },\n        {\n          \"student_name\" : \"Elena\",\n          \"contact_email\" : \"\"\n        },\n        {\n          \"student_name\" : \"Everly Hazard\",\n          \"contact_email\" : \"jenhaz23@gmail.com\"\n        },\n        {\n          \"student_name\" : \"Gabi M.\",\n          \"contact_email\" : \"\"\n        },\n        {\n          \"student_name\" : \"Gemma Smith\",\n          \"contact_email\" : \"TiaFSmith@gmail.com\"\n        },\n...[TRUNCATED]
✅ Fetched lesson data and lookup tables in parallel
📊 34 students, 19 teachers loaded
🎨 Loaded 37 teacher color mappings
📚 Processed 75 lessons into 40 unique student-teacher combinations
🔍 Pre-fetching 2 unique customers for 40 lessons
✅ Customer cache built: 2 customers cached
🚀 Processing 40 invoices concurrently...
Error processing invoice for Hazel: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Vivi Fincher: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Reese: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Everly: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Vivian Fincher: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Mila: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Harlow: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Larkin/everly technique: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Everly solo: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Remi: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Kinley: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Mia W: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Ava Fransen: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Kaylee Kaloustian: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
Error processing invoice for Hazel: Error: Request rate limit exceeded. You can learn more about rate limits here https://stripe.com/docs/rate-limits.
    at o.toJSON.then.ee.message (.next/server/app/api/studio/invoicing/route.js:11:17987) {
  type: 'StripeRateLimitError',
  raw: [Object],
  rawType: 'rate_limit_error',
  code: 'rate_limit',
  doc_url: 'https://stripe.com/docs/error-codes/rate-limit',
  param: undefined,
  detail: undefined,
  headers: [Object],
  requestId: undefined,
  statusCode: 429,
  userMessage: undefined,
  charge: undefined,
  decline_code: undefined,
  payment_intent: undefined,
  payment_method: undefined,
  payment_method_type: undefined,
  setup_intent: undefined,
  source: undefined
}
✅ Completed processing 40 invoices
🔍 Blog Database Query Execution: 
      SELECT 
        id,
        title,
        slug,
        content,
        excerpt,
        author,
        status,
        tags,
        TO_CHAR(created_at, 'YYYY-MM-DD"T"HH24:MI:SS"Z"') as cre...
✅ Blog database query executed successfully
📤 Raw Oracle Output (first 500 chars): 
{
  "results" : [
    {
      "columns" : [
        {
          "name" : "ID",
          "type" : "NUMBER"
        },
        {
          "name" : "TITLE",
          "type" : "VARCHAR2"
        },
        {
          "name" : "SLUG",
          "type" : "VARCHAR2"
        },
        {
          "name" : "CONTENT",
          "type" : "CLOB"
        },
        {
          "name" : "EXCERPT",
          "type" : "VARCHAR2"
        },
        {
          "name" : "AUTHOR",
          "type" : "VARCHAR...
✅ Successfully parsed as JSON. Structure: {
  "results": [
    {
      "columns": [
        {
          "name": "ID",
          "type": "NUMBER"
        },
        {
          "name": "TITLE",
          "type": "VARCHAR2"
        },
        {
          "name": "SLUG",
          "type": "VARCHAR2"
        },
        {
          "name": "CONTENT",
          "type": "CLOB"
        },
        {
          "name": "EXCERPT",
          "type": "VARCHAR2"
        },
        {
          "name": "AUTHOR",
          "type": "VARCHAR2"
        },
 
✅ Extracted Oracle items: 2 rows
📊 Blog query result structure: object true 2
File uploaded successfully: {
  originalName: "Oracle Review - You have been invited to the review 'E78525-'OMLUG - Oracle Machine Learning User'_'_'s Guide''..pdf",
  fileName: "Oracle Review - You have been invited to the review 'E78525-'OMLUG - Oracle Machine Learning User'_'_'s Guide''._1752594039558.pdf",
  filePath: "/Users/pcannata/Mine/My Repositories/_2026 Oracle Projects/_Oracle Collaborations/README_files/Oracle Review - You have been invited to the review 'E78525-'OMLUG - Oracle Machine Learning User'_'_'s Guide''._1752594039558.pdf",
  relativePath: "./README_files/Oracle%20Review%20-%20You%20have%20been%20invited%20to%20the%20review%20'E78525-'OMLUG%20-%20Oracle%20Machine%20Learning%20User'_'_'s%20Guide''._1752594039558.pdf",
  size: 87107,
  type: 'application/pdf'
}
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        TEACHER_ID,
        TEACHER_NAME,
        FIRST_NAME,
        LAST_NAME,
        EMAIL,
        PHONE,
        SPECIALTIES,
        STATUS,
        NOTES,
        PRICE,
        CREATED_DATE,
        MODIFIED_DATE
      FROM STUDIO_TEACHERS
     ORDER BY TEACHER_NAME
📊 Query length: 290
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        TEACHER_ID,
        TEACHER_NAME,
        FIRST_NAME,
        LAST_NAME,
        EMAIL,
        PHONE,
        SPECIALTIES,
        STATUS,
        NOTES,
📊 Query length: 290
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        s.STUDENT_ID,
        s.STUDENT_NAME,
        s.PARENT_FIRST_NAME,
        s.PARENT_LAST_NAME,
        s.CONTACT_EMAIL,
        s.CONTACT_PHONE,
        TO_CHAR(s.BIRTH_DATE, 'YYYY-MM-DD') as BIRTH_DATE_STR,
        FLOOR(MONTHS_BETWEEN(SYSDATE, s.BIRTH_DATE) / 12) as AGE,
        s.AUDITION_STATUS,
        s.NOTES,
        'N' as AUDITION_PREP,
        'N' as TECHNIQUE_INTENSIVE,
        'N' as BALLET_INTENSIVE,
        'N' as MASTER_INTENSIVE
      FROM STUDIO_STUDENTS s
📊 Query length: 529
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        s.STUDENT_ID,
        s.STUDENT_NAME,
        s.PARENT_FIRST_NAME,
        s.PARENT_LAST_NAME,
        s.CONTACT_EMAIL,
        s.CONTACT_PHONE,
        T
📊 Query length: 529
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
     WHERE WEEK_START_DATE = TO_DATE('2025-06-09', 'YYYY-MM-DD')
📊 Query length: 237
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
    
📊 Query length: 237
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as week_start,
        TO_CHAR(WEEK_START_DATE, 'DD-MON-YY') as formatted_date,
        LESSON_ID as lesson_id
      FROM STUDIO_PRIVATE_LESSONS
      ORDER BY WEEK_START_DATE DESC
    
📊 Query length: 247
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as week_start,
        TO_CHAR(WEEK_START_DATE, 'DD-MON-YY') as formatted_date,
        LESSON_ID as lesson_id
    
📊 Query length: 247
✅ Database query executed successfully
📤 Output length: 473
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"WEEK_START\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"FORMATTED_DATE\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"LESSON_ID\",\n          \"type\" : \"VARCHAR2\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"week_start\" : \"2025-06-09\",\n          \"formatted_date\" : \"09-JUN-25\",\n          \"lesson_id\" : \"\"\n        }\n      ]\n    }\n  ]\n}"
✅ Database query executed successfully
📤 Output length: 14988
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"WEEKOF\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"LESSONID\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"WEEKDATA\",\n          \"type\" : \"CLOB\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"weekof\" : \"2025-06-09\",\n          \"lessonid\" : \"\",\n          \"weekdata\" : \"{\\\"week_info\\\":{\\\"sheet_name\\\":\\\"69 -615\\\",\\\"week_identifier\\\":\\\"2025-07-14-69 -615\\\",\\\"source_file\\\":\\\"Private lesson Calendar 1 tab.xlsx\\\"},\\\"teachers\\\":{\\\"MEGHAN\\\":\\\"#EAD1DC\\\",\\\"RYANN\\\":\\\"#C9DAF8\\\",\\\"PAIGE\\\":\\\"#FFF2CC\\\",\\\"GRACIE\\\":\\\"#D9EAD3\\\",\\\"CARALIN ( BALLET TEACHER)\\\":\\\"#D9D2E9\\\",\\\"HUNTER\\\":\\\"#F6B26B\\\",\\\"Reese\\\":\\\"#FFF2CC\\\",\\\"Kaylee Kaloustian\\\":\\\"#A4C2F4\\\",\\\"Mia Tubbs\\\":\\\"#A4C2F4\\\",\\\"Vivian Fincher\\\":\\\"#FFF2...[TRUNCATED]
📖 Loading schedule data: {
  "weekof": "2025-06-09",
  "lessonid": "",
  "weekdata": "{\"week_info\":{\"sheet_name\":\"69 -615\",\"week_identifier\":\"2025-07-14-69 -615\",\"source_file\":\"Private lesson Calendar 1 tab.xlsx\"},\"teachers\":{\"MEGHAN\":\"#EAD1DC\",\"RYANN\":\"#C9DAF8\",\"PAIGE\":\"#FFF2CC\",\"GRACIE\":\"#D9EAD3\",\"CARALIN ( BALLET TEACHER)\":\"#D9D2E9\",\"HUNTER\":\"#F6B26B\",\"Reese\":\"#FFF2CC\",\"Kaylee Kaloustian\":\"#A4C2F4\",\"Mia Tubbs\":\"#A4C2F4\",\"Vivian Fincher\":\"#FFF2CC\",\"Alia Pollema Solo\":\"#A4C2F4\",\"Everly/Larkin\":\"#A4C2F4\",\"Marik solo\":\"#A4C2F4\",\"Everly solo\":\"#EAD1DC\",\"Mila\":\"#EAD1DC\",\"Everly /Larkin\":\"#A4C2F4\",\"Gabi M\":\"#00FF00\",\"Marik\":\"#A4C2F4\",\"Larkin\":\"#EAD1DC\",\"Mia W\":\"#A4C2F4\",\"Everly\":\"#EAD1DC\",\"Kinley\":\"#B4A7D6\",\"Kinley - technique / solo\":\"#FFF2CC\",\"Kinley - solo\":\"#A4C2F4\",\"Hazel\":\"#FFF2CC\",\"Larkin/everly technique\":\"#A4C2F4\",\"Hazel- tech\":\"#A4C2F4\",\"Vivi Fincher\":\"#FFF2CC\",\"Hazel- solos\":...[TRUNCATED]
🔄 Parsed week data: {
  "week_info": {
    "sheet_name": "69 -615",
    "week_identifier": "2025-07-14-69 -615",
    "source_file": "Private lesson Calendar 1 tab.xlsx"
  },
  "teachers": {
    "MEGHAN": "#EAD1DC",
    "RYANN": "#C9DAF8",
    "PAIGE": "#FFF2CC",
    "GRACIE": "#D9EAD3",
    "CARALIN ( BALLET TEACHER)": "#D9D2E9",
    "HUNTER": "#F6B26B",
    "Reese": "#FFF2CC",
    "Kaylee Kaloustian": "#A4C2F4",
    "Mia Tubbs": "#A4C2F4",
    "Vivian Fincher": "#FFF2CC",
    "Alia Pollema Solo": "#A4C2F4",
    "Everly/Larkin": "#A4C2F4",
    "Marik solo": "#A4C2F4",
    "Everly solo": "#EAD1DC",
    "Mila": "#EAD1DC",
    "Everly /Larkin": "#A4C2F4",
    "Gabi M": "#00FF00",
    "Marik": "#A4C2F4",
    "Larkin": "#EAD1DC",
    "Mia W": "#A4C2F4",
    "Everly": "#EAD1DC",
    "Kinley": "#B4A7D6",
    "Kinley - technique / solo": "#FFF2CC",
    "Kinley - solo": "#A4C2F4",
    "Hazel": "#FFF2CC",
    "Larkin/everly technique": "#A4C2F4",
    "Hazel- tech": "#A4C2F4",
    "Vivi Fincher": "#FFF2CC",
    "Haz...[TRUNCATED]
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
     WHERE WEEK_START_DATE = TO_DATE('2025-06-09', 'YYYY-MM-DD')
📊 Query length: 237
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        TO_CHAR(WEEK_START_DATE, 'YYYY-MM-DD') as weekOf,
        LESSON_ID as lessonId,
        FULL_WEEK_JSON as weekData
      FROM STUDIO_PRIVATE_LESSONS
    
📊 Query length: 237
✅ Database query executed successfully
📤 Output length: 19842
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"STUDENT_ID\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n          \"name\" : \"STUDENT_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PARENT_FIRST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PARENT_LAST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"CONTACT_EMAIL\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"CONTACT_PHONE\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"BIRTH_DATE_STR\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"AGE\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n          \"name\" : \"AUDITION_STATUS\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"NOTES\",\n          \"type\"...[TRUNCATED]
🔍 Executing Oracle Database Query (first 500 chars): 
      SELECT 
        s.STUDENT_ID,
        s.STUDENT_NAME,
        s.PARENT_FIRST_NAME,
        s.PARENT_LAST_NAME,
        s.CONTACT_EMAIL,
        s.CONTACT_PHONE,
        TO_CHAR(s.BIRTH_DATE, 'YYYY-MM-DD') as BIRTH_DATE_STR,
        FLOOR(MONTHS_BETWEEN(SYSDATE, s.BIRTH_DATE) / 12) as AGE,
        s.AUDITION_STATUS,
        s.NOTES,
        'N' as AUDITION_PREP,
        'N' as TECHNIQUE_INTENSIVE,
        'N' as BALLET_INTENSIVE,
        'N' as MASTER_INTENSIVE
      FROM STUDIO_STUDENTS s
📊 Query length: 529
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      SELECT 
        s.STUDENT_ID,
        s.STUDENT_NAME,
        s.PARENT_FIRST_NAME,
        s.PARENT_LAST_NAME,
        s.CONTACT_EMAIL,
        s.CONTACT_PHONE,
        T
📊 Query length: 529
❌ Database query error: 2025-07-15 14:30:20.357 SEVERE oracle.dbtools.raptor.newscriptrunner.commands.net.NetEntries save NET-010 /Users/pcannata/.sqlcl/netEntries.xml could not be renamed to /Users/pcannata/.sqlcl/netEntries.xml~ /Users/pcannata/.sqlcl/netEntries.xml

❌ Failed query (first 500 chars): 
      SELECT 
        TEACHER_ID,
        TEACHER_NAME,
        FIRST_NAME,
        LAST_NAME,
        EMAIL,
        PHONE,
        SPECIALTIES,
        STATUS,
        NOTES,
        PRICE,
        CREATED_DATE,
        MODIFIED_DATE
      FROM STUDIO_TEACHERS
     ORDER BY TEACHER_NAME
❌ Database execution error: Error: Database error: 2025-07-15 14:30:20.357 SEVERE oracle.dbtools.raptor.newscriptrunner.commands.net.NetEntries save NET-010 /Users/pcannata/.sqlcl/netEntries.xml could not be renamed to /Users/pcannata/.sqlcl/netEntries.xml~ /Users/pcannata/.sqlcl/netEntries.xml

    at i (.next/server/app/api/debug/week-detail/route.js:11:705)
    at async l (.next/server/app/api/studio/teachers/route.js:29:115)
Error fetching teachers: Error: Database execution failed: Database error: 2025-07-15 14:30:20.357 SEVERE oracle.dbtools.raptor.newscriptrunner.commands.net.NetEntries save NET-010 /Users/pcannata/.sqlcl/netEntries.xml could not be renamed to /Users/pcannata/.sqlcl/netEntries.xml~ /Users/pcannata/.sqlcl/netEntries.xml

    at i (.next/server/app/api/debug/week-detail/route.js:11:1480)
    at async l (.next/server/app/api/studio/teachers/route.js:29:115)
✅ Database query executed successfully
📤 Output length: 14988
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"WEEKOF\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"LESSONID\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"WEEKDATA\",\n          \"type\" : \"CLOB\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"weekof\" : \"2025-06-09\",\n          \"lessonid\" : \"\",\n          \"weekdata\" : \"{\\\"week_info\\\":{\\\"sheet_name\\\":\\\"69 -615\\\",\\\"week_identifier\\\":\\\"2025-07-14-69 -615\\\",\\\"source_file\\\":\\\"Private lesson Calendar 1 tab.xlsx\\\"},\\\"teachers\\\":{\\\"MEGHAN\\\":\\\"#EAD1DC\\\",\\\"RYANN\\\":\\\"#C9DAF8\\\",\\\"PAIGE\\\":\\\"#FFF2CC\\\",\\\"GRACIE\\\":\\\"#D9EAD3\\\",\\\"CARALIN ( BALLET TEACHER)\\\":\\\"#D9D2E9\\\",\\\"HUNTER\\\":\\\"#F6B26B\\\",\\\"Reese\\\":\\\"#FFF2CC\\\",\\\"Kaylee Kaloustian\\\":\\\"#A4C2F4\\\",\\\"Mia Tubbs\\\":\\\"#A4C2F4\\\",\\\"Vivian Fincher\\\":\\\"#FFF2...[TRUNCATED]
📖 Loading schedule data: {
  "weekof": "2025-06-09",
  "lessonid": "",
  "weekdata": "{\"week_info\":{\"sheet_name\":\"69 -615\",\"week_identifier\":\"2025-07-14-69 -615\",\"source_file\":\"Private lesson Calendar 1 tab.xlsx\"},\"teachers\":{\"MEGHAN\":\"#EAD1DC\",\"RYANN\":\"#C9DAF8\",\"PAIGE\":\"#FFF2CC\",\"GRACIE\":\"#D9EAD3\",\"CARALIN ( BALLET TEACHER)\":\"#D9D2E9\",\"HUNTER\":\"#F6B26B\",\"Reese\":\"#FFF2CC\",\"Kaylee Kaloustian\":\"#A4C2F4\",\"Mia Tubbs\":\"#A4C2F4\",\"Vivian Fincher\":\"#FFF2CC\",\"Alia Pollema Solo\":\"#A4C2F4\",\"Everly/Larkin\":\"#A4C2F4\",\"Marik solo\":\"#A4C2F4\",\"Everly solo\":\"#EAD1DC\",\"Mila\":\"#EAD1DC\",\"Everly /Larkin\":\"#A4C2F4\",\"Gabi M\":\"#00FF00\",\"Marik\":\"#A4C2F4\",\"Larkin\":\"#EAD1DC\",\"Mia W\":\"#A4C2F4\",\"Everly\":\"#EAD1DC\",\"Kinley\":\"#B4A7D6\",\"Kinley - technique / solo\":\"#FFF2CC\",\"Kinley - solo\":\"#A4C2F4\",\"Hazel\":\"#FFF2CC\",\"Larkin/everly technique\":\"#A4C2F4\",\"Hazel- tech\":\"#A4C2F4\",\"Vivi Fincher\":\"#FFF2CC\",\"Hazel- solos\":...[TRUNCATED]
🔄 Parsed week data: {
  "week_info": {
    "sheet_name": "69 -615",
    "week_identifier": "2025-07-14-69 -615",
    "source_file": "Private lesson Calendar 1 tab.xlsx"
  },
  "teachers": {
    "MEGHAN": "#EAD1DC",
    "RYANN": "#C9DAF8",
    "PAIGE": "#FFF2CC",
    "GRACIE": "#D9EAD3",
    "CARALIN ( BALLET TEACHER)": "#D9D2E9",
    "HUNTER": "#F6B26B",
    "Reese": "#FFF2CC",
    "Kaylee Kaloustian": "#A4C2F4",
    "Mia Tubbs": "#A4C2F4",
    "Vivian Fincher": "#FFF2CC",
    "Alia Pollema Solo": "#A4C2F4",
    "Everly/Larkin": "#A4C2F4",
    "Marik solo": "#A4C2F4",
    "Everly solo": "#EAD1DC",
    "Mila": "#EAD1DC",
    "Everly /Larkin": "#A4C2F4",
    "Gabi M": "#00FF00",
    "Marik": "#A4C2F4",
    "Larkin": "#EAD1DC",
    "Mia W": "#A4C2F4",
    "Everly": "#EAD1DC",
    "Kinley": "#B4A7D6",
    "Kinley - technique / solo": "#FFF2CC",
    "Kinley - solo": "#A4C2F4",
    "Hazel": "#FFF2CC",
    "Larkin/everly technique": "#A4C2F4",
    "Hazel- tech": "#A4C2F4",
    "Vivi Fincher": "#FFF2CC",
    "Haz...[TRUNCATED]
✅ Database query executed successfully
📤 Output length: 19842
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"STUDENT_ID\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n          \"name\" : \"STUDENT_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PARENT_FIRST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"PARENT_LAST_NAME\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"CONTACT_EMAIL\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"CONTACT_PHONE\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"BIRTH_DATE_STR\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"AGE\",\n          \"type\" : \"NUMBER\"\n        },\n        {\n          \"name\" : \"AUDITION_STATUS\",\n          \"type\" : \"VARCHAR2\"\n        },\n        {\n          \"name\" : \"NOTES\",\n          \"type\"...[TRUNCATED]
🧪 Testing database operations...
Test 1: Simple SELECT
🔍 Executing Oracle Database Query (first 500 chars): SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS
📊 Query length: 52
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS"
📊 Query length: 52
✅ Database query executed successfully
📤 Output length: 209
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"COUNT\",\n          \"type\" : \"NUMBER\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"count\" : 1\n        }\n      ]\n    }\n  ]\n}"
✅ SELECT result: [ { count: 1 } ]
Test 2: INSERT with small JSON
🔄 Executing insert...
🔍 Executing Oracle Database Query (first 500 chars): 
      INSERT INTO STUDIO_PRIVATE_LESSONS 
      (WEEK_START_DATE, FULL_WEEK_JSON)
      VALUES (TO_DATE('2025-07-13', 'YYYY-MM-DD'), '{"test":"small data","timestamp":"2025-07-15T23:13:47.446Z"}')
    
📊 Query length: 202
📝 Original params count: 2
   Param 0: string, length: 10
   Param 1: string, length: 60
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      INSERT INTO STUDIO_PRIVATE_LESSONS 
      (WEEK_START_DATE, FULL_WEEK_JSON)
      VALUES (TO_DATE('2025-07-13', 'YYYY-MM-DD'), '{\"test\":\"small data\",\"timestamp\":\"2
📊 Query length: 202
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
✅ INSERT result: [ { success: true, operation: 'modify', output: '' } ]
Test 3: Explicit COMMIT
🔍 Executing Oracle Database Query (first 500 chars): COMMIT
📊 Query length: 6
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "COMMIT"
📊 Query length: 6
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
✅ COMMIT result: [ { success: true, operation: 'modify', output: '' } ]
Test 4: Verify INSERT
🔍 Executing Oracle Database Query (first 500 chars): SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')
📊 Query length: 112
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')"
📊 Query length: 112
✅ Database query executed successfully
📤 Output length: 209
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"COUNT\",\n          \"type\" : \"NUMBER\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"count\" : 1\n        }\n      ]\n    }\n  ]\n}"
✅ VERIFY result: [ { count: 1 } ]
Test 5: Cleanup
🔍 Executing Oracle Database Query (first 500 chars): DELETE FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')
📊 Query length: 94
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "DELETE FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')"
📊 Query length: 94
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
🔍 Executing Oracle Database Query (first 500 chars): COMMIT
📊 Query length: 6
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "COMMIT"
📊 Query length: 6
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
🧪 Testing database operations...
Test 1: Simple SELECT
🔍 Executing Oracle Database Query (first 500 chars): SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS
📊 Query length: 52
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS"
📊 Query length: 52
✅ Database query executed successfully
📤 Output length: 209
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"COUNT\",\n          \"type\" : \"NUMBER\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"count\" : 1\n        }\n      ]\n    }\n  ]\n}"
✅ SELECT result: [ { count: 1 } ]
Test 2: INSERT with small JSON
🔄 Executing insert...
🔍 Executing Oracle Database Query (first 500 chars): 
      INSERT INTO STUDIO_PRIVATE_LESSONS 
      (WEEK_START_DATE, FULL_WEEK_JSON)
      VALUES (TO_DATE('2025-07-13', 'YYYY-MM-DD'), '{"test":"small data","timestamp":"2025-07-15T23:15:38.089Z"}')
    
📊 Query length: 202
📝 Original params count: 2
   Param 0: string, length: 10
   Param 1: string, length: 60
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      INSERT INTO STUDIO_PRIVATE_LESSONS 
      (WEEK_START_DATE, FULL_WEEK_JSON)
      VALUES (TO_DATE('2025-07-13', 'YYYY-MM-DD'), '{\"test\":\"small data\",\"timestamp\":\"2
📊 Query length: 202
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
✅ INSERT result: [ { success: true, operation: 'modify', output: '' } ]
Test 3: Explicit COMMIT
🔍 Executing Oracle Database Query (first 500 chars): COMMIT
📊 Query length: 6
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "COMMIT"
📊 Query length: 6
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
✅ COMMIT result: [ { success: true, operation: 'modify', output: '' } ]
Test 4: Verify INSERT
🔍 Executing Oracle Database Query (first 500 chars): SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')
📊 Query length: 112
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')"
📊 Query length: 112
✅ Database query executed successfully
📤 Output length: 209
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"COUNT\",\n          \"type\" : \"NUMBER\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"count\" : 1\n        }\n      ]\n    }\n  ]\n}"
✅ VERIFY result: [ { count: 1 } ]
Test 5: Cleanup
🔍 Executing Oracle Database Query (first 500 chars): DELETE FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')
📊 Query length: 94
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "DELETE FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')"
📊 Query length: 94
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
🔍 Executing Oracle Database Query (first 500 chars): COMMIT
📊 Query length: 6
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "COMMIT"
📊 Query length: 6
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
🧪 Testing database operations...
Test 1: Simple SELECT
🔍 Executing Oracle Database Query (first 500 chars): SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS
📊 Query length: 52
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS"
📊 Query length: 52
✅ Database query executed successfully
📤 Output length: 209
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"COUNT\",\n          \"type\" : \"NUMBER\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"count\" : 1\n        }\n      ]\n    }\n  ]\n}"
✅ SELECT result: [ { count: 1 } ]
Test 2: INSERT with small JSON
🔄 Executing insert...
🔍 Executing Oracle Database Query (first 500 chars): 
      INSERT INTO STUDIO_PRIVATE_LESSONS 
      (WEEK_START_DATE, FULL_WEEK_JSON)
      VALUES (TO_DATE('2025-07-13', 'YYYY-MM-DD'), '{"test":"small data","timestamp":"2025-07-15T23:18:04.616Z"}')
    
📊 Query length: 202
📝 Original params count: 2
   Param 0: string, length: 10
   Param 1: string, length: 60
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "
      INSERT INTO STUDIO_PRIVATE_LESSONS 
      (WEEK_START_DATE, FULL_WEEK_JSON)
      VALUES (TO_DATE('2025-07-13', 'YYYY-MM-DD'), '{\"test\":\"small data\",\"timestamp\":\"2
📊 Query length: 202
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
✅ INSERT result: [ { success: true, operation: 'modify', output: '' } ]
Test 3: Explicit COMMIT
🔍 Executing Oracle Database Query (first 500 chars): COMMIT
📊 Query length: 6
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "COMMIT"
📊 Query length: 6
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
✅ COMMIT result: [ { success: true, operation: 'modify', output: '' } ]
Test 4: Verify INSERT
🔍 Executing Oracle Database Query (first 500 chars): SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')
📊 Query length: 112
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "SELECT COUNT(*) as count FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')"
📊 Query length: 112
✅ Database query executed successfully
📤 Output length: 209
📤 Raw output: "\n{\n  \"results\" : [\n    {\n      \"columns\" : [\n        {\n          \"name\" : \"COUNT\",\n          \"type\" : \"NUMBER\"\n        }\n      ],\n      \"items\" : [\n        {\n          \"count\" : 1\n        }\n      ]\n    }\n  ]\n}"
✅ VERIFY result: [ { count: 1 } ]
Test 5: Cleanup
🔍 Executing Oracle Database Query (first 500 chars): DELETE FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')
📊 Query length: 94
📝 Original params count: 1
   Param 0: string, length: 10
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "DELETE FROM STUDIO_PRIVATE_LESSONS WHERE WEEK_START_DATE = TO_DATE('2025-07-13', 'YYYY-MM-DD')"
📊 Query length: 94
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
🔍 Executing Oracle Database Query (first 500 chars): COMMIT
📊 Query length: 6
📝 Original params count: 0
🚀 Executing command (first 200 chars): bash ./SQLclScript.sh "COMMIT"
📊 Query length: 6
✅ Database query executed successfully
📤 Output length: 1
📤 Raw output: "\n"
🔄 This is a modifying query (INSERT/UPDATE/DELETE), returning success indicator
